/*****************************************************
 * Discord Check-In Bot (Apps Script + Web App)
 * Version: v1.0.0
 * - Daily post with one-click check-in link
 * - Web app endpoint to record check-ins
 * - Streak tracking + weekly leaderboard
 * - Safe retry on Discord webhook
 *****************************************************/

const VERSION = 'v1.0.0';
const SHEET_USERS = 'Users';
const SHEET_CHECKINS = 'Checkins';
const SHEET_SETTINGS = 'Settings';

/** ---------- Core helpers ---------- **/
function ss() {
  return SpreadsheetApp.getActiveSpreadsheet();
}
function getSheet(name) {
  const sh = ss().getSheetByName(name);
  if (!sh) throw new Error(`Missing sheet: ${name}`);
  return sh;
}
function getSettings() {
  const sh = getSheet(SHEET_SETTINGS);
  const obj = {};
  const rows = sh.getDataRange().getValues();
  for (let i = 1; i < rows.length; i++) {
    const [k, v] = rows[i];
    if (k) obj[String(k).trim()] = v;
  }
  return obj;
}
function nowIsoUTC() {
  return new Date().toISOString();
}
function toISODate(d, tz) {
  return Utilities.formatDate(d, tz, 'yyyy-MM-dd');
}
function todayISO(tz) {
  return toISODate(new Date(), tz);
}

/** ---------- Discord webhook with retries ---------- **/
function postToDiscord(message) {
  const settings = getSettings();
  const url = settings.DISCORD_WEBHOOK;
  if (!url) throw new Error('Missing DISCORD_WEBHOOK in Settings.');

  const payload = typeof message === 'string' ? { content: message } : message;
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true,
  };

  const backoffsMs = [0, 500, 1500, 3000]; // simple exponential-ish
  let lastError = null;
  for (let i = 0; i < backoffsMs.length; i++) {
    if (i > 0) Utilities.sleep(backoffsMs[i]);
    try {
      const resp = UrlFetchApp.fetch(url, options);
      const code = resp.getResponseCode();
      if (code >= 200 && code < 300) return true;

      if (code === 429) {
        // Respect Discord retry-after (ms)
        try {
          const body = JSON.parse(resp.getContentText() || '{}');
          const retryAfter = Math.ceil(Number(body.retry_after || 1000));
          Utilities.sleep(retryAfter);
        } catch (e) {
          Utilities.sleep(1500);
        }
        continue;
      }
      lastError = `Discord HTTP ${code}: ${resp.getContentText()}`;
    } catch (e) {
      lastError = String(e);
    }
  }
  throw new Error(`Failed to post to Discord after retries: ${lastError}`);
}

/** ---------- Users table helpers ---------- **/
function findUserRowById(userId) {
  const sh = getSheet(SHEET_USERS);
  const values = sh.getDataRange().getValues();
  for (let i = 1; i < values.length; i++) {
    if (String(values[i][0]) === String(userId)) return i + 1; // 1-based row
  }
  return -1;
}
function upsertUser(userId, username) {
  const sh = getSheet(SHEET_USERS);
  const header = sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0];
  const colMap = Object.fromEntries(header.map((h, i) => [String(h).trim(), i + 1]));
  const required = ['userId', 'username', 'currentStreak', 'bestStreak', 'lastCheckin'];
  for (const key of required) {
    if (!colMap[key]) throw new Error(`Users sheet headers must include: ${required.join(' | ')}`);
  }

  let row = findUserRowById(userId);
  if (row === -1) {
    row = sh.getLastRow() + 1;
    sh.getRange(row, colMap.userId).setValue(String(userId));
    sh.getRange(row, colMap.currentStreak).setValue(0);
    sh.getRange(row, colMap.bestStreak).setValue(0);
    sh.getRange(row, colMap.lastCheckin).setValue('');
  }
  // Always update username to latest seen
  sh.getRange(row, colMap.username).setValue(username || '');
  return { row, colMap };
}

/** ---------- Check-in + streak logic ---------- **/
function recordCheckin(userId, username, checkinISODate, source = 'web') {
  const settings = getSettings();
  const tz = settings.TIMEZONE || Session.getScriptTimeZone() || 'UTC';
  const date = checkinISODate || todayISO(tz);

  // Append to Checkins log
  const log = getSheet(SHEET_CHECKINS);
  log.appendRow([nowIsoUTC(), date, String(userId), String(username || ''), source]);

  // Update streaks
  const { row, colMap } = upsertUser(userId, username || '');
  const sh = getSheet(SHEET_USERS);
  const last = sh.getRange(row, colMap.lastCheckin).getValue();
  const curStreak = Number(sh.getRange(row, colMap.currentStreak).getValue()) || 0;
  const bestStreak = Number(sh.getRange(row, colMap.bestStreak).getValue()) || 0;

  let newStreak = 1;
  if (last) {
    const lastISO = toISODate(new Date(last), 'UTC'); // normalizes
    const diffDays = Math.round(
      (new Date(date + 'T00:00:00Z') - new Date(lastISO + 'T00:00:00Z')) / (1000 * 60 * 60 * 24)
    );
    if (diffDays === 0) {
      newStreak = curStreak; // already checked in today
    } else if (diffDays === 1) {
      newStreak = curStreak + 1;
    } else if (diffDays > 1) {
      newStreak = 1; // streak broken
    }
  }

  const newBest = Math.max(bestStreak, newStreak);
  sh.getRange(row, colMap.currentStreak).setValue(newStreak);
  sh.getRange(row, colMap.bestStreak).setValue(newBest);
  if (!last || toISODate(new Date(last), 'UTC') !== date) {
    sh.getRange(row, colMap.lastCheckin).setValue(date);
  }

  return { date, newStreak, newBest };
}

/** ---------- Web App endpoint ---------- **/
function doGet(e) {
  try {
    const settings = getSettings();
    const tz = settings.TIMEZONE || 'UTC';
    const today = todayISO(tz);

    const userId = (e.parameter.u || '').trim();
    const username = (e.parameter.n || '').trim() || userId;
    const dateParam = (e.parameter.d || '').trim();
    const token = (e.parameter.t || '').trim(); // optional, not used in v1.0.0

    if (!userId) return htmlResponse('Missing user parameter. Use the link from Discord.', true);

    // (Optional) Validate token/date if you add a daily token scheme later
    const date = dateParam || today;

    const res = recordCheckin(userId, username, date, 'web');

    const msg = `
      <div style="font-family:system-ui;padding:24px;max-width:700px;margin:auto;">
        <h2>✅ You’re checked in!</h2>
        <p><b>${escapeHtml(username)}</b>, recorded for <b>${date}</b>.</p>
        <p>Current streak: <b>${res.newStreak}</b> (Best: ${res.newBest})</p>
        <p>You can close this window. Have a great day!</p>
        <p style="font-size:12px;color:#888;text-align:center;margin-top:32px;">${VERSION}</p>
      </div>`;
    return HtmlService.createHtmlOutput(msg)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (err) {
    return htmlResponse('Error: ' + escapeHtml(String(err)), true);
  }
}

/** ---------- HTML wrapper with versioned footer ---------- **/
function htmlResponse(body, isError) {
  const color = isError ? '#b00020' : '#0b6e4f';
  const html = `
    <div style="font-family:system-ui;padding:24px;max-width:700px;margin:auto;color:${color}">
      ${body}
      <hr style="margin-top:40px;border:none;border-top:1px solid #ddd;">
      <p style="font-size:12px;color:#888;text-align:center;margin-top:12px;">
        Discord Check-In Bot — <b>${VERSION}</b>
      </p>
    </div>`;
  return HtmlService.createHtmlOutput(html)
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}
function escapeHtml(s) {
  return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
}

/** ---------- Daily public post ---------- **/
function postDailyCheckin() {
  const settings = getSettings();
  const tz = settings.TIMEZONE || 'UTC';
  const date = todayISO(tz);
  const webAppUrl = getWebAppUrl_();

  const genericLink = `${webAppUrl}?d=${encodeURIComponent(date)}`;
  const content =
`✅ **Daily Check-In — ${date}**
Click here to mark yourself present:
${genericLink}

Tip: If you want your name attached automatically, click the personalized link I post or use \`?u=YOUR_USER_ID&n=Your+Name\`.
_${VERSION}_`;

  postToDiscord({ content });
}

/** ---------- Optional: per-user links in a follow-up ---------- **/
function postPersonalizedLinksInThread() {
  const settings = getSettings();
  const tz = settings.TIMEZONE || 'UTC';
  const date = todayISO(tz);
  const webAppUrl = getWebAppUrl_();

  const sh = getSheet(SHEET_USERS);
  const values = sh.getDataRange().getValues();
  const header = values[0];
  const idxId = header.indexOf('userId');
  const idxName = header.indexOf('username');
  if (idxId < 0 || idxName < 0) throw new Error('Users headers missing.');

  const lines = [];
  for (let i = 1; i < values.length; i++) {
    const userId = String(values[i][idxId] || '').trim();
    const username = String(values[i][idxName] || '').trim() || userId;
    if (!userId) continue;
    const link = `${webAppUrl}?u=${encodeURIComponent(userId)}&n=${encodeURIComponent(username)}&d=${encodeURIComponent(date)}`;
    lines.push(`• <@${userId}> → ${link}`);
  }
  if (lines.length) {
    postToDiscord({ content: `Personalized check-in links for **${date}**:\n${lines.join('\n')}\n_${VERSION}_` });
  }
}

/** ---------- Weekly leaderboard ---------- **/
function postWeeklyLeaderboard() {
  const sh = getSheet(SHEET_USERS);
  const values = sh.getDataRange().getValues();
  const header = values[0];
  const idxName = header.indexOf('username');
  const idxStreak = header.indexOf('currentStreak');
  const idxBest = header.indexOf('bestStreak');
  if (idxName < 0 || idxStreak < 0 || idxBest < 0) throw new Error('Users headers missing.');

  const rows = values.slice(1).map(r => ({
    username: r[idxName] || '',
    current: Number(r[idxStreak] || 0),
    best: Number(r[idxBest] || 0),
  }));
  rows.sort((a, b) => b.current - a.current || b.best - a.best || (a.username > b.username ? 1 : -1));

  const top = rows.slice(0, 10);
  const lines = top.map((r, i) => `**${i + 1}.** ${r.username} — Streak: ${r.current} (Best: ${r.best})`);
  const content =
`🏆 **Weekly Check-In Leaderboard**
${lines.join('\n') || '_No data yet — start checking in!_'}
_${VERSION}_`;
  postToDiscord({ content });
}

/** ---------- Maintenance / Admin ---------- **/
function adminBackfillStreaksFromLog() {
  const log = getSheet(SHEET_CHECKINS).getDataRange().getValues().slice(1);
  const byUser = new Map();
  for (const row of log) {
    const date = String(row[1] || '').trim();
    const uid = String(row[2] || '').trim();
    const name = String(row[3] || '').trim();
    if (!uid || !date) continue;
    if (!byUser.has(uid)) byUser.set(uid, { name, dates: new Set() });
    byUser.get(uid).dates.add(date);
  }
  const sh = getSheet(SHEET_USERS);
  const header = sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0];
  const idx = {
    userId: header.indexOf('userId') + 1,
    username: header.indexOf('username') + 1,
    currentStreak: header.indexOf('currentStreak') + 1,
    bestStreak: header.indexOf('bestStreak') + 1,
    lastCheckin: header.indexOf('lastCheckin') + 1,
  };
  if (Object.values(idx).some(v => v <= 0)) throw new Error('Users sheet headers missing');

  const lastRow = sh.getLastRow();
  if (lastRow > 1) {
    sh.getRange(2, idx.currentStreak, lastRow - 1, 1).setValue(0);
    sh.getRange(2, idx.bestStreak, lastRow - 1, 1).setValue(0);
    sh.getRange(2, idx.lastCheckin, lastRow - 1, 1).setValue('');
  }

  byUser.forEach((v, uid) => {
    const dates = Array.from(v.dates).sort();
    let best = 0;
    let current = 0;
    for (let i = 0; i < dates.length; i++) {
      if (i === 0) { current = 1; best = 1; continue; }
      const prev = new Date(dates[i - 1] + 'T00:00:00Z');
      const cur = new Date(dates[i] + 'T00:00:00Z');
      const diff = Math.round((cur - prev) / (1000 * 60 * 60 * 24));
      current = (diff === 1) ? current + 1 : 1;
      best = Math.max(best, current);
    }
    const { row } = upsertUser(uid, v.name || uid);
    sh.getRange(row, idx.currentStreak).setValue(current);
    sh.getRange(row, idx.bestStreak).setValue(best);
    sh.getRange(row, idx.lastCheckin).setValue(dates[dates.length - 1] || '');
  });
}

/** ---------- Web App URL helper ---------- **/
function getWebAppUrl_() {
  try {
    return ScriptApp.getService().getUrl();
  } catch (e) {
    const settings = getSettings();
    if (settings.WEBAPP_URL) return String(settings.WEBAPP_URL);
    throw new Error('Set WEBAPP_URL in Settings or use the latest deployment URL.');
  }
}
